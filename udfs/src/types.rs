use std::collections::HashMap;

use async_openai::config::Config;
use reqwest::header::{HeaderMap, AUTHORIZATION};
use secrecy::{ExposeSecret, SecretString};
use serde::{Deserialize, Serialize};
pub const LANGDB_API_BASE: &str = "https://XXXXXX.langdb.ai/v1";
/// Project header
pub const LANGDB_PROJECT_HEADER: &str = "X-Project-Id";

use serde_json::Value;

#[derive(Debug, Serialize, Deserialize, Clone)]
pub struct CompletionConfig {
    #[serde(flatten)]
    pub config: GatewayConfig,
    #[serde(flatten)]
    pub model_settings: ModelSettings,
}

#[derive(Debug, Serialize, Deserialize, Clone)]
pub enum FunctionConfig {
    Completion(CompletionConfig),
    Embedding(EmbeddingConfig),
}
impl FunctionConfig {
    pub fn r#type(&self) -> &str {
        match self {
            FunctionConfig::Completion(_) => "completion",
            FunctionConfig::Embedding(_) => "embedding",
        }
    }

    pub fn max_tokens(&self) -> Option<usize> {
        match self {
            FunctionConfig::Completion(config) => config.model_settings.max_tokens,
            FunctionConfig::Embedding(config) => config.model_settings.max_tokens,
        }
    }
}

#[derive(Debug, Serialize, Deserialize, Clone)]
pub struct EmbeddingConfig {
    #[serde(flatten)]
    pub config: GatewayConfig,
    #[serde(flatten)]
    pub model_settings: EmbeddingSettings,
}

#[derive(Debug, Serialize, Deserialize, Clone)]
pub struct EmbeddingSettings {
    /// The model to use for embedding
    #[serde(default = "default_embedding_model")]
    pub model: String,

    /// The maximum number of [tokens]
    #[serde(default)]
    pub max_tokens: Option<usize>,
}
fn default_embedding_model() -> String {
    "text-embedding-3-small".to_string()
}

#[derive(Debug, Serialize, Deserialize, Clone)]
pub struct ModelSettings {
    /// The model to use for completion
    #[serde(default = "default_model")]
    pub model: String,

    /// Number between -2.0 and 2.0. Positive values penalize new tokens based on their existing frequency in the text so far, decreasing the model's likelihood to repeat the same line verbatim.
    ///
    /// [See more information about frequency and presence penalties.](https://platform.openai.com/docs/api-reference/parameter-details)
    #[serde(default)]
    pub frequency_penalty: Option<f32>, // min: -2.0, max: 2.0, default: 0

    /// Modify the likelihood of specified tokens appearing in the completion.
    ///
    /// Accepts a json object that maps tokens (specified by their token ID in the tokenizer) to an associated bias value from -100 to 100.
    /// Mathematically, the bias is added to the logits generated by the model prior to sampling.
    /// The exact effect will vary per model, but values between -1 and 1 should decrease or increase likelihood of selection;
    /// values like -100 or 100 should result in a ban or exclusive selection of the relevant token.
    #[serde(default)]
    pub logit_bias: Option<HashMap<String, serde_json::Value>>, // default: null

    /// Whether to return log probabilities of the output tokens or not. If true, returns the log probabilities of each output token returned in the `content` of `message`.
    #[serde(default)]
    pub logprobs: Option<bool>,

    /// An integer between 0 and 20 specifying the number of most likely tokens to return at each token position, each with an associated log probability. `logprobs` must be set to `true` if this parameter is used.
    #[serde(default)]
    pub top_logprobs: Option<u8>,

    /// The maximum number of [tokens](https://platform.openai.com/tokenizer) that can be generated in the chat completion.
    ///
    /// The total length of input tokens and generated tokens is limited by the model's context length. [Example Python code](https://cookbook.openai.com/examples/how_to_count_tokens_with_tiktoken) for counting tokens.
    #[serde(default)]
    pub max_tokens: Option<usize>,

    /// How many chat completion choices to generate for each input message. Note that you will be charged based on the number of generated tokens across all of the choices. Keep `n` as `1` to minimize costs.
    #[serde(default)]
    pub n: Option<u8>, // min:1, max: 128, default: 1

    /// Number between -2.0 and 2.0. Positive values penalize new tokens based on whether they appear in the text so far, increasing the model's likelihood to talk about new topics.
    ///
    /// [See more information about frequency and presence penalties.](https://platform.openai.com/docs/api-reference/parameter-details)
    #[serde(default)]
    pub presence_penalty: Option<f32>, // min: -2.0, max: 2.0, default 0

    /// An object specifying the format that the model must output. Compatible with [GPT-4 Turbo](https://platform.openai.com/docs/models/gpt-4-and-gpt-4-turbo) and all GPT-3.5 Turbo models newer than `gpt-3.5-turbo-1106`.
    ///
    /// Setting to `{ "type": "json_object" }` enables JSON mode, which guarantees the message the model generates is valid JSON.
    ///
    /// **Important:** when using JSON mode, you **must** also instruct the model to produce JSON yourself via a system or user message. Without this, the model may generate an unending stream of whitespace until the generation reaches the token limit, resulting in a long-running and seemingly "stuck" request. Also note that the message content may be partially cut off if `finish_reason="length"`, which indicates the generation exceeded `max_tokens` or the conversation exceeded the max context length.
    #[serde(default)]
    pub response_format: Option<Value>,

    ///  This feature is in Beta.
    /// If specified, our system will make a best effort to sample deterministically, such that repeated requests
    /// with the same `seed` and parameters should return the same result.
    /// Determinism is not guaranteed, and you should refer to the `system_fingerprint` response parameter to monitor changes in the backend.
    #[serde(default)]
    pub seed: Option<i64>,

    /// Up to 4 sequences where the API will stop generating further tokens.
    #[serde(default)]
    pub stop: Option<String>,
}

fn default_model() -> String {
    "gpt-4o-mini".to_string()
}

#[derive(Clone, Debug, Serialize, Deserialize)]
#[serde(default)]
pub struct GatewayConfig {
    api_base: String,
    #[serde(skip)]
    api_key: SecretString,
    project_id: String,
    #[serde(default = "default_uuid_v4")]
    thread_id: Option<String>,
    #[serde(default)]
    run_id: Option<String>,
}

fn default_uuid_v4() -> Option<String> {
    Some(uuid::Uuid::new_v4().to_string())
}

#[derive(Debug, Serialize, Deserialize, Clone)]
pub struct CommonResponse {
    pub response: Value,
    pub usage: Usage,
}

#[derive(Debug, Serialize, Deserialize, Clone)]
pub struct Usage {
    pub total_tokens: usize,
}

impl Default for GatewayConfig {
    fn default() -> Self {
        Self {
            api_base: std::env::var("LANGDB_API_BASE")
                .unwrap_or_else(|_| LANGDB_API_BASE.to_string()),
            api_key: std::env::var("LANGDB_API_KEY")
                .unwrap_or_else(|_| "".to_string())
                .into(),
            project_id: std::env::var("LANGDB_PROJECT_ID").unwrap_or_else(|_| "".to_string()),
            thread_id: default_uuid_v4(),
            run_id: default_uuid_v4(),
        }
    }
}

impl GatewayConfig {
    /// Create client with default [LANGDB_API_BASE] url and default API key from LANGDB_API_KEY env var
    pub fn new() -> Self {
        Default::default()
    }

    /// Non default project id
    pub fn with_project_id<S: Into<String>>(mut self, project_id: S) -> Self {
        self.project_id = project_id.into();
        self
    }

    /// To use a different API key different from default LANGDB_API_KEY env var
    pub fn with_api_key<S: Into<String>>(mut self, api_key: S) -> Self {
        self.api_key = SecretString::from(api_key.into());
        self
    }

    /// To use a API base url different from default [LANGDB_API_BASE]
    pub fn with_api_base<S: Into<String>>(mut self, api_base: S) -> Self {
        self.api_base = api_base.into();
        self
    }

    pub fn with_thread_id<S: Into<String>>(mut self, thread_id: S) -> Self {
        self.thread_id = Some(thread_id.into());
        self
    }

    pub fn with_run_id<S: Into<String>>(mut self, run_id: S) -> Self {
        self.run_id = Some(run_id.into());
        self
    }
}

pub const LANGDB_THREAD_HEADER: &str = "X-Thread-Id";
pub const LANGDB_RUN_HEADER: &str = "X-Run-Id";
impl Config for GatewayConfig {
    fn headers(&self) -> HeaderMap {
        let mut headers = HeaderMap::new();

        if !self.project_id.is_empty() {
            headers.insert(
                LANGDB_PROJECT_HEADER,
                self.project_id.as_str().parse().unwrap(),
            );
        }

        headers.insert(
            AUTHORIZATION,
            format!("Bearer {}", self.api_key.expose_secret())
                .as_str()
                .parse()
                .unwrap(),
        );

        let thread_id = self
            .thread_id
            .clone()
            .unwrap_or_else(|| uuid::Uuid::new_v4().to_string());
        headers.insert(LANGDB_THREAD_HEADER, thread_id.parse().unwrap());

        let run_id = self
            .run_id
            .clone()
            .unwrap_or_else(|| uuid::Uuid::new_v4().to_string());
        headers.insert(LANGDB_RUN_HEADER, run_id.parse().unwrap());

        headers
    }

    fn url(&self, path: &str) -> String {
        format!("{}{}", self.api_base, path)
    }

    fn api_base(&self) -> &str {
        &self.api_base
    }

    fn api_key(&self) -> &secrecy::SecretBox<str> {
        &self.api_key
    }

    fn query(&self) -> Vec<(&str, &str)> {
        vec![]
    }
}
